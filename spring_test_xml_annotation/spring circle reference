org.springframework.beans.factory.support.DefaultListableBeanFactory#preInstantiateSingletons
	//获取debugObj对象
	org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean
	//分别从singletonObjects 单例池(一级缓存中获取)，earlySingletonObjects 二级缓存中获取，singletonFactories 三级缓存中获取
	//但是此时debugObj没有创建和初始化，所以获取不到
	org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(...)
		org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean
			//标记debugObj为正在创建的对象
			org.springframework.beans.factory.support.AbstractBeanFactory#markBeanAsCreated
		//从factoryBeanInstanceCache中获取，获取不到就创建
			org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance
			//选择生成方式，是否为autowire模式，或者是类反射获取构造器生成
				//类反射获取构造器生成
				org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(...)
				//包装生成的对象
		//调用BeanPostProcessor的before
		//判断是否为需要提前暴露(解决依赖的关键，单例、允许循环依赖、正在被创建)
			org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingletonFactory
			*将debugObj对象从二级缓存earlySingletonObjects删除放入三级缓存singletonFactories中
		//对debugObj注入属性
		org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean
		//获取要注入的属性debugObj2
		org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyPropertyValues
			//获取debugObj2对象
			org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean
			//分别从singletonObjects 单例池(一级缓存中获取)，earlySingletonObjects 二级缓存中获取，singletonFactories 三级缓存中获取
			//但是此时debugObj2没有创建和初始化，所以获取不到
			org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(...)
				org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean
					//标记debugObj2为正在创建的对象
					org.springframework.beans.factory.support.AbstractBeanFactory#markBeanAsCreated
				//从factoryBeanInstanceCache中获取，获取不到就创建
					org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance
					//选择生成方式，是否为autowire模式，或者是类反射获取构造器生成
						//类反射获取构造器生成
						org.springframework.beans.factory.support.SimpleInstantiationStrategy#instantiate(...)
						//包装生成的对象		
				//调用BeanPostProcessor的before
				//判断是否为需要提前暴露(解决依赖的关键，单例、允许循环依赖、正在被创建)
					org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingletonFactory
					*将debugObj2对象从二级缓存earlySingletonObjects删除放入三级缓存singletonFactories中
				//对debugObj2注入属性
				org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean
				//得到debugObj2对象
					org.springframework.beans.AbstractPropertyAccessor#setPropertyValues(org.springframework.beans.PropertyValues)
				//获取要注入的属性debugObj
				org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyPropertyValues
					获取debugObj
					org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean
					//分别从singletonObjects 单例池(一级缓存中获取)，earlySingletonObjects 二级缓存中获取，singletonFactories 三级缓存中获取
					//最后在三级缓存中找到，通过三级缓存放入的ObjectFactory去获取debugObj，将debugObj从三级缓存中删除，放入二级缓存中
					//触发Processor，因为从三级缓存中删除移动到二级缓存中去了，所有如果还有其他需要注入debugObj的不会再触改processor发了
					org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#getEarlyBeanReference
					//获取之后注入debugObj到debugObj2
				//调用BeanPostProcessor的after
				//最后判断debugObj2是否为新生成的单例对象
				//如果是就将debugObj2从二级缓存删除，将debugObj2放入一级缓存单例池中
					org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingleton
				//返回debugObj2对象
		//得到debugObj2对象
			org.springframework.beans.AbstractPropertyAccessor#setPropertyValues(org.springframework.beans.PropertyValues)
		//调用BeanPostProcessor的after
		//判断debugObj是否为新生成的单例对象
		//如果是就将debugObj从二级缓存删除，将debugObj放入一级缓存单例池中
			org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingleton
		//最后返回debugObj对象	
	返回getSingleton
返回preInstantiateSingletons方法