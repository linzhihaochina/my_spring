<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

    <!--直接配置-->
    <bean id="lazyObj" class="com.youngforcoding.pojo.LazyObj" lazy-init="true" init-method="initMethod"
          destroy-method="destroyMethod" scopeType="prototype">
    </bean>
    <!--通过静态的工厂方法生产-->
    <bean id="lazyObj2" class="com.youngforcoding.factory.FactoryBean" factory-method="getLazyObjByStaticMethod"
          destroy-method="destroyMethod"/>
    <!--通过普通的工厂方法生产-->
    <bean id="factoryBean" class="com.youngforcoding.factory.FactoryBean"/>
    <bean id="lazyObj3" factory-bean="factoryBean" factory-method="getLazyObjByCommonMethod" init-method="initMethod"
          scopeType="prototype"/>

    <bean id="diTarget" class="com.youngforcoding.pojo.DITarget">
        <!--DITarget类提供一个四个参数的构造方法-->
        <!--<constructor-arg name="intVal" value="1"/>-->
        <!--<constructor-arg name="strVal" value="abc"/>-->
        <!--<constructor-arg name="floatVal" value="1.3f"/>-->
        <!--<constructor-arg name="lazyObj" ref="lazyObj"/>-->
        <!--按构造方法的参数索引进行注入-->
        <constructor-arg index="0" value="1"/>
        <constructor-arg index="1" value="abc"/>
        <constructor-arg index="2" value="1.3f"/>
        <constructor-arg index="3" ref="lazyObj"/>
        <!--DITarget类提供一个setLazyObj方法-->
        <property name="lazyObj" ref="lazyObj"/>
    </bean>
    <bean id="diTarget2" class="com.youngforcoding.pojo.DITarget2">
        <!--DITarget2提供一个构造方法，第一个参数是int数组，第二个参数是List也可以是Set，第三个参数是Map，第四个参数是Properties-->
        <constructor-arg name="intArr">
            <array>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </array>
        </constructor-arg>
        <constructor-arg name="list">
            <list>
                <value>4</value>
                <value>5</value>
                <value>6</value>
            </list>
        </constructor-arg>
        <constructor-arg name="map">
            <map>
                <entry key="1" value="2"/>
                <entry key-ref="lazyObj" value="2"/>
                <entry key="2" value-ref="lazyObj2"/>
            </map>
        </constructor-arg>
        <constructor-arg name="properties">
            <props>
                <prop key="1">value1</prop>
                <prop key="2">value2</prop>
            </props>
        </constructor-arg>
        <!--DITarget2提供一个intArr(int数组类型)的set方法-->
        <property name="intArr">
            <array>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </array>
        </property>
        <!--DITarget2提供一个list(List类型)的set方法-->
        <property name="list">
            <list>
                <value>4</value>
                <value>5</value>
                <value>6</value>
            </list>
        </property>
        <!--DITarget2提供一个map(Map类型)的set方法-->
        <property name="map">
            <map>
                <entry key="1" value="2"/>
                <entry key-ref="lazyObj" value="2"/>
                <entry key="2" value-ref="lazyObj2"/>
            </map>
        </property>
        <!--DITarget2提供一个properties(Properties类型)的set方法-->
        <property name="properties">
            <props>
                <prop key="1">value1</prop>
                <prop key="2">value2</prop>
            </props>
        </property>
    </bean>

<!--    <bean id="connectionUtil" class="com.youngforcoding.util.JdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="accountDao" class="com.youngforcoding.dao.impl.JdbcAccountDaoImpl">
        <!--        <property name="connectionUtils" ref="connectionUtil"/>-->
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>
    <!--    <bean id="transactionManager" class="com.youngforcoding.util.TransactionManager">-->
    <!--        <property name="connectionUtils" ref="connectionUtil"/>-->
    <!--    </bean>-->
    <bean id="transferService" class="com.youngforcoding.service.impl.TransferServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>
    <!--        <bean id="proxyFactory" class="com.youngforcoding.factory.ProxyFactory">-->
    <!--            <property name="transactionManager" ref="transactionManager"/>-->
    <!--        </bean>-->


        <bean id="aopTest" class="com.youngforcoding.pojo.AopTest"/>
        <!--将切面对象交给spring托管-->
        <bean id="logUtil" class="com.youngforcoding.aspect.LogUtil"/>
        <!--开始aop配置，强制开启cglib代理-->
        <aop:config>
            <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.youngforcoding.service.*.*(..))"/>
            <!--配置切点-->
            <!--<aop:pointcut id="pointCut1" expression="execution(* *(*))"/>-->
            <!--配置切面类-->
            <aop:aspect id="logAspect" ref="logUtil">
                <!--配置advice引用切点-->
                <!--<aop:before method="before" pointcut-ref="pointCut1"/>-->
                <!--配置advice与切点-->
                <aop:before method="before" pointcut="execution(* com.youngforcoding.service.*.*())"/>
                <!--不管执行过程是否抛出异常都会执行的advice-->
                <aop:after method="after" pointcut="execution(* com.youngforcoding.service.*.*())"/>
                <!--正常返回执行该advice在after advice执行之后-->
                <aop:after-returning method="afterReturning" pointcut="execution(* com.youngforcoding.service.*.*())"/>
                <!--抛出异常执行该advice-->
                <aop:after-throwing method="afterThrowing" pointcut="execution(* com.youngforcoding.service.*.*())"/>
                <!--环绕增强advice，一个顶上面所有advice的功能-->
                <!--<aop:around method="around" pointcut="execution(* com.youngforcoding.service.*.*())"/>-->
            </aop:aspect>
        </aop:config>

    <context:property-placeholder location="jdbc.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
        </tx:attributes>
    </tx:advice>

</beans>